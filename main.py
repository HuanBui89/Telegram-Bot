import argparse
import os
import asyncio
from datetime import datetime
import pytz
from openai import OpenAI
from telegram import Bot
from PIL import Image
import requests
import io
import traceback

# === C·∫•u h√¨nh ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, GROUP_CHAT_ID]):
    raise ValueError("‚ö†Ô∏è Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: TELEGRAM_TOKEN, OPENAI_API_KEY ho·∫∑c GROUP_CHAT_ID")

# Kh·ªüi t·∫°o client
bot = Bot(token=TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === C·∫£nh n·ªÅn thay ƒë·ªïi theo ng√†y ===
daily_scenes = {
    "Monday": "sunrise over a calm lake with morning mist",
    "Tuesday": "golden rice fields in early sunlight",
    "Wednesday": "sunrise over peaceful ocean waves",
    "Thursday": "lush green hills and valley at dawn",
    "Friday": "mountains with glowing fog and flowers",
    "Saturday": "sunlight on a tropical beach with palm trees",
    "Sunday": "river flowing through peaceful forest in sunrise",
}

# === L·ªùi ch√∫c theo ng√†y ===
weekday_boost = {
    "Monday": "üìÖ ƒê·∫ßu tu·∫ßn r·ªìi, bung l·ª•a m·ªü b√°t thi·ªát m·∫°nh nha m·∫•y ch·∫ø! üí™",
    "Tuesday": "üìÖ Th·ª© ba kh√¥ng drama ‚Äì ch·ªâ c√≥ ƒë∆°n ƒë·ªï √†o √†o th√¥i n√®! üìà",
    "Wednesday": "üìÖ Gi·ªØa tu·∫ßn gi·ªØ phong ƒë·ªô, ƒë∆°n v·ªÅ l√† c√≥ ƒë·ªông l·ª±c li·ªÅn! üòé",
    "Thursday": "üìÖ Th·ª© nƒÉm tƒÉng t·ªëc, ch·∫°y KPI m∆∞·ª£t nh∆∞ n∆∞·ªõc m·∫Øm Nam Ng∆∞! üöÄ",
    "Friday": "üìÖ Cu·ªëi tu·∫ßn nh∆∞ng kh√¥ng x·∫£ h∆°i ‚Äì ch·ªët ƒë∆°n xong r·ªìi h√£y ch∆°i! üï∫",
    "Saturday": "üìÖ Th·ª© b·∫£y m√°u chi·∫øn ‚Äì ai ch·ªët ƒë∆∞·ª£c h√¥m nay l√† ƒë·ªânh c·ªßa ch√≥p! üî•",
    "Sunday": "üìÖ Ch·ªß nh·∫≠t chill nh·∫π, nh∆∞ng ai ch·ªët ƒë∆°n th√¨ v·∫´n l√† ng∆∞·ªùi chi·∫øn th·∫Øng! üèÜ",
}

# === H√†m l·∫•y text t·ª´ ChatGPT ===
def get_text(prompt: str, max_tokens=150) -> str:
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # d√πng model m·ªõi nh·∫•t, r·∫ª h∆°n, nhanh h∆°n
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi OpenAI Chat:", e)
        return "Kh√¥ng l·∫•y ƒë∆∞·ª£c ch√¢m ng√¥n h√¥m nay üò¢"

# === H√†m t·∫°o ·∫£nh ===
def create_image(prompt: str) -> str:
    try:
        print("üñºÔ∏è T·∫°o ·∫£nh v·ªõi prompt:", prompt)
        response = client.images.generate(
            model="gpt-4o-mini",  # ho·∫∑c "dall-e-3" n·∫øu t√†i kho·∫£n h·ªó tr·ª£
            prompt=prompt,
            size="1024x1024",
            n=1,
        )
        image_url = response.data[0].url
        image_bytes = requests.get(image_url).content
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")

        os.makedirs("/tmp", exist_ok=True)
        image_path = "/tmp/morning_motivation.png"
        image.save(image_path)
        return image_path
    except Exception as e:
        print("‚ùå L·ªói khi t·∫°o ·∫£nh:", e)
        traceback.print_exc()
        return None

# === H√†m g·ª≠i tin bu·ªïi s√°ng ===
async def send_morning_message():
    try:
        vietnam_tz = pytz.timezone("Asia/Ho_Chi_Minh")
        now = datetime.now(vietnam_tz)
        today = now.strftime("%A")
        current_time = now.strftime("%H:%M:%S")

        print(f"üïí [DEBUG] Gi·ªù hi·ªán t·∫°i (ICT): {current_time}")
        print(f"üìÖ H√¥m nay l√†: {today}")

        # 1. L·∫•y quote
        quote_en = get_text("Give me one short inspirational quote by a famous person, include the name.")
        quote_vi = get_text(f"D·ªãch sang ti·∫øng Vi·ªát, truy·ªÅn c·∫£m h·ª©ng v√† d·ªÖ hi·ªÉu:\n{quote_en}")
        quote = f"‚Äú{quote_en}‚Äù\n_({quote_vi})_"

        # 2. T·∫°o ·∫£nh
        scene_prompt = f"A beautiful {daily_scenes.get(today, 'sunrise over mountains')}, ultra-realistic, no text"
        image_path = create_image(scene_prompt)

        # 3. So·∫°n caption
        greeting = "Ch√†o bu·ªïi s√°ng team sales! ‚òÄÔ∏è"
        daily_line = weekday_boost.get(today, "")
        caption = f"{greeting}\n{daily_line}\n\nüí° **Ch√¢m ng√¥n h√¥m nay:**\n{quote}"

        # 4. G·ª≠i Telegram
        if image_path and os.path.exists(image_path):
            print("üì§ ƒêang g·ª≠i ·∫£nh l√™n Telegram...")
            with open(image_path, "rb") as img:
                await bot.send_photo(
                    chat_id=GROUP_CHAT_ID,
                    photo=img,
                    caption=caption,
                    parse_mode="Markdown",
                    read_timeout=30,
                    connect_timeout=15
                )
            print("‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng l√∫c:", datetime.now(vietnam_tz).strftime("%H:%M:%S"))
        else:
            print("‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c ·∫£nh, g·ª≠i tin nh·∫Øn text thay th·∫ø.")
            await bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=caption,
                parse_mode="Markdown"
            )

    except Exception as e:
        print("‚ùå L·ªói nghi√™m tr·ªçng:", str(e))
        traceback.print_exc()

# === Entry point ===
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--once', action='store_true', help='G·ª≠i tin ngay l·∫≠p t·ª©c')
    args = parser.parse_args()

    if args.once:
        asyncio.run(send_morning_message())

if __name__ == "__main__":
    main()
